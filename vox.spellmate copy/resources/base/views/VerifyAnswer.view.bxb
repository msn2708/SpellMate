result-view {
  match: Announcer(this) {
    from-output: VerifyAnswer (action)
  }

  render {
    layout {
      section {
        title {
          if(this.counter != -100) {
            if (this.scoreBook.score[this.counter].result == true) {
              choose (Random) {              
                template ("Congratulations!")
                template ("You did it!")
                template ("Well done!")
                template ("Good job!")
              }
            } else {
              choose (Random) {
                template ("Sorry! that is not correct")
                template ("Better luck next time")                
              }
            }        
          }
        }

        content {
          if(this.counter != -100) {
            if (this.scoreBook.score[this.counter].result == true) {
              cell-area {
                slot1 {
                  image {
                    shape (Circle)
                    url ("/images/correct.jpg")
                  }
                }
                slot2 {                  
                  content {                    
                    order (PrimarySecondary) 
                    primary {
                      template ("#{value(action.answer.spelledWord)}")                      
                    }
                    secondary {
                      template ("#{value(this.questionBank.questions[counter].challengeWord)}")
                    }
                  }
                }
              }
            } else {
              cell-area {
                slot1 {
                  image {
                    shape (Circle)
                    url ("/images/incorrect.jpg")
                  }
                }
                slot2 {
                  content {
                    order (PrimarySecondary) 
                    primary {
                      template ("#{value(action.answer.spelledWord)}")
                    }
                    secondary {
                      template ("#{value(this.questionBank.questions[counter].challengeWord)}")

                    }
                  }
                }
              }              
            }
          } 
        }
      }
      if (this.counter == -100) {
        layout-macro (scores-layout) {
          param (scores) {
            expression (this.scoreBook.score)
          }
        }
      }
    }
  }
  followup {
    if (this.counter == -100) {
      prompt {
        dialog {
          template ("Would you like to start a new game?")
        }
        on-confirm {
          intent {
            goal: RestartGame
            value: $expr(this)
          }
        }
        on-deny {       
          message(Bye)
        }
      }
    } else {
      if (this.counter == size(this.questionBank.questions) - 2) {
        prompt {
          dialog {
            template (Ready for your last question?)
          }
          on-confirm {
            intent {
              goal: AskNextQuestion
              value: $expr(this)
            }
          }
          on-deny {
            message {
              template ("Ok. Until next time then!")
            }
          }
        }  

      } else {
        prompt {
          dialog {
            choose (Random) {
              template (Would you like to see the next question?)
              template (Ready for the next question?)
              template (Shall we move on to the next question?)
            }
          }
          on-confirm {
            intent {
              goal: AskNextQuestion
              value: $expr(this)
            }
          }
          on-deny {
            message(Bye!)
          }
        }
      }
    } 
  }
}